/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.bonc.hbase.bulkload.sensorolap;
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Event extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Event\",\"namespace\":\"com.my.hbase.project.sensorolap\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"eventId\",\"type\":\"string\"},{\"name\":\"eventType\",\"type\":\"string\"},{\"name\":\"partName\",\"type\":\"string\"},{\"name\":\"partNumber\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"long\"},{\"name\":\"payload\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public CharSequence id;
  @Deprecated public CharSequence eventId;
  @Deprecated public CharSequence eventType;
  @Deprecated public CharSequence partName;
  @Deprecated public CharSequence partNumber;
  @Deprecated public long version;
  @Deprecated public CharSequence payload;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Event() {}

  /**
   * All-args constructor.
   */
  public Event(CharSequence id, CharSequence eventId, CharSequence eventType, CharSequence partName, CharSequence partNumber, Long version, CharSequence payload) {
    this.id = id;
    this.eventId = eventId;
    this.eventType = eventType;
    this.partName = partName;
    this.partNumber = partNumber;
    this.version = version;
    this.payload = payload;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return eventId;
    case 2: return eventType;
    case 3: return partName;
    case 4: return partNumber;
    case 5: return version;
    case 6: return payload;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: id = (CharSequence)value$; break;
    case 1: eventId = (CharSequence)value$; break;
    case 2: eventType = (CharSequence)value$; break;
    case 3: partName = (CharSequence)value$; break;
    case 4: partNumber = (CharSequence)value$; break;
    case 5: version = (Long)value$; break;
    case 6: payload = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'eventId' field.
   */
  public CharSequence getEventId() {
    return eventId;
  }

  /**
   * Sets the value of the 'eventId' field.
   * @param value the value to set.
   */
  public void setEventId(CharSequence value) {
    this.eventId = value;
  }

  /**
   * Gets the value of the 'eventType' field.
   */
  public CharSequence getEventType() {
    return eventType;
  }

  /**
   * Sets the value of the 'eventType' field.
   * @param value the value to set.
   */
  public void setEventType(CharSequence value) {
    this.eventType = value;
  }

  /**
   * Gets the value of the 'partName' field.
   */
  public CharSequence getPartName() {
    return partName;
  }

  /**
   * Sets the value of the 'partName' field.
   * @param value the value to set.
   */
  public void setPartName(CharSequence value) {
    this.partName = value;
  }

  /**
   * Gets the value of the 'partNumber' field.
   */
  public CharSequence getPartNumber() {
    return partNumber;
  }

  /**
   * Sets the value of the 'partNumber' field.
   * @param value the value to set.
   */
  public void setPartNumber(CharSequence value) {
    this.partNumber = value;
  }

  /**
   * Gets the value of the 'version' field.
   */
  public Long getVersion() {
    return version;
  }

  /**
   * Sets the value of the 'version' field.
   * @param value the value to set.
   */
  public void setVersion(Long value) {
    this.version = value;
  }

  /**
   * Gets the value of the 'payload' field.
   */
  public CharSequence getPayload() {
    return payload;
  }

  /**
   * Sets the value of the 'payload' field.
   * @param value the value to set.
   */
  public void setPayload(CharSequence value) {
    this.payload = value;
  }

  /** Creates a new Event RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }

  /** Creates a new Event RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /** Creates a new Event RecordBuilder by copying an existing Event instance */
  public static Builder newBuilder(Event other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for Event instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Event>
    implements org.apache.avro.data.RecordBuilder<Event> {

    private CharSequence id;
    private CharSequence eventId;
    private CharSequence eventType;
    private CharSequence partName;
    private CharSequence partNumber;
    private long version;
    private CharSequence payload;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eventId)) {
        this.eventId = data().deepCopy(fields()[1].schema(), other.eventId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.eventType)) {
        this.eventType = data().deepCopy(fields()[2].schema(), other.eventType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.partName)) {
        this.partName = data().deepCopy(fields()[3].schema(), other.partName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.partNumber)) {
        this.partNumber = data().deepCopy(fields()[4].schema(), other.partNumber);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.version)) {
        this.version = data().deepCopy(fields()[5].schema(), other.version);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.payload)) {
        this.payload = data().deepCopy(fields()[6].schema(), other.payload);
        fieldSetFlags()[6] = true;
      }
    }

    /** Creates a Builder by copying an existing Event instance */
    private Builder(Event other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eventId)) {
        this.eventId = data().deepCopy(fields()[1].schema(), other.eventId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.eventType)) {
        this.eventType = data().deepCopy(fields()[2].schema(), other.eventType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.partName)) {
        this.partName = data().deepCopy(fields()[3].schema(), other.partName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.partNumber)) {
        this.partNumber = data().deepCopy(fields()[4].schema(), other.partNumber);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.version)) {
        this.version = data().deepCopy(fields()[5].schema(), other.version);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.payload)) {
        this.payload = data().deepCopy(fields()[6].schema(), other.payload);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public CharSequence getId() {
      return id;
    }

    /** Sets the value of the 'id' field */
    public Builder setId(CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }

    /** Clears the value of the 'id' field */
    public Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'eventId' field */
    public CharSequence getEventId() {
      return eventId;
    }

    /** Sets the value of the 'eventId' field */
    public Builder setEventId(CharSequence value) {
      validate(fields()[1], value);
      this.eventId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /** Checks whether the 'eventId' field has been set */
    public boolean hasEventId() {
      return fieldSetFlags()[1];
    }

    /** Clears the value of the 'eventId' field */
    public Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'eventType' field */
    public CharSequence getEventType() {
      return eventType;
    }

    /** Sets the value of the 'eventType' field */
    public Builder setEventType(CharSequence value) {
      validate(fields()[2], value);
      this.eventType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /** Checks whether the 'eventType' field has been set */
    public boolean hasEventType() {
      return fieldSetFlags()[2];
    }

    /** Clears the value of the 'eventType' field */
    public Builder clearEventType() {
      eventType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'partName' field */
    public CharSequence getPartName() {
      return partName;
    }

    /** Sets the value of the 'partName' field */
    public Builder setPartName(CharSequence value) {
      validate(fields()[3], value);
      this.partName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /** Checks whether the 'partName' field has been set */
    public boolean hasPartName() {
      return fieldSetFlags()[3];
    }

    /** Clears the value of the 'partName' field */
    public Builder clearPartName() {
      partName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'partNumber' field */
    public CharSequence getPartNumber() {
      return partNumber;
    }

    /** Sets the value of the 'partNumber' field */
    public Builder setPartNumber(CharSequence value) {
      validate(fields()[4], value);
      this.partNumber = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /** Checks whether the 'partNumber' field has been set */
    public boolean hasPartNumber() {
      return fieldSetFlags()[4];
    }

    /** Clears the value of the 'partNumber' field */
    public Builder clearPartNumber() {
      partNumber = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'version' field */
    public Long getVersion() {
      return version;
    }

    /** Sets the value of the 'version' field */
    public Builder setVersion(long value) {
      validate(fields()[5], value);
      this.version = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /** Checks whether the 'version' field has been set */
    public boolean hasVersion() {
      return fieldSetFlags()[5];
    }

    /** Clears the value of the 'version' field */
    public Builder clearVersion() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'payload' field */
    public CharSequence getPayload() {
      return payload;
    }

    /** Sets the value of the 'payload' field */
    public Builder setPayload(CharSequence value) {
      validate(fields()[6], value);
      this.payload = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /** Checks whether the 'payload' field has been set */
    public boolean hasPayload() {
      return fieldSetFlags()[6];
    }

    /** Clears the value of the 'payload' field */
    public Builder clearPayload() {
      payload = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public Event build() {
      try {
        Event record = new Event();
        record.id = fieldSetFlags()[0] ? this.id : (CharSequence) defaultValue(fields()[0]);
        record.eventId = fieldSetFlags()[1] ? this.eventId : (CharSequence) defaultValue(fields()[1]);
        record.eventType = fieldSetFlags()[2] ? this.eventType : (CharSequence) defaultValue(fields()[2]);
        record.partName = fieldSetFlags()[3] ? this.partName : (CharSequence) defaultValue(fields()[3]);
        record.partNumber = fieldSetFlags()[4] ? this.partNumber : (CharSequence) defaultValue(fields()[4]);
        record.version = fieldSetFlags()[5] ? this.version : (Long) defaultValue(fields()[5]);
        record.payload = fieldSetFlags()[6] ? this.payload : (CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
